jenkins:
  systemMessage: "Jenkins сконфигурирован автоматически при помощи JCasC."

  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "admin"

        - id: "developer"
          password: "developer"

        - id: "viewer"
          password: "viewer"

  authorizationStrategy:
    projectMatrix:
      entries:
        - user:
            name: admin
            permissions:
              - Overall/Administer
        - user:
            name: developer
            permissions:
              - Overall/Read
              - Job/Build
        - user:
            name: viewer
            permissions:
              - Overall/Read

tool:
  git:
    installations:
      - name: "Default"
        home: "/usr/bin/git"
  maven:
    installations:
      - name: maven3
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.8.4"

jobs:
  - script: >
      pipelineJob('Template DevSecOps pipeline') {
        definition {
          cps {
            script(''' 
                pipeline {
                    agent any
                    stages {
                        stage('Checkout') {
                            steps {
                                sh 'git clone https://github.com/jinghao1/DockerVulspace'
                            }
                        }
                        stage('SAST (Bandit)') {
                            agent {
                                docker {
                                    image 'python:3.10'
                                    reuseNode true
                                }
                            }
                            steps {
                                echo 'Preparing environment...'
                                sh 'pip install bandit'
                                sh 'ls -la'
      
                                echo 'Runnig SAST...'
                                sh 'python3 -m bandit -r . -f xml -o bandit_sast.xml || true'
                                
                                echo 'Here is the report...'
                                sh 'cat bandit_sast.xml || true'
      
                                archiveArtifacts artifacts: 'bandit_sast.xml', allowEmptyArchive: true, fingerprint: true
                            }
                        }
                        stage('Run application') {
                            steps {
                                sh 'docker network create dast_scan || true'
                                sh 'docker run -d --name test --network dast_scan nginx'
                            }
                        }
                        stage('DAST (OWASP ZAP)') {
                            agent {
                                docker {
                                    image 'zaproxy/zap-stable'
                                    args '--network dast_scan'
                                    reuseNode true
                                }
                            }
                            steps {
                                echo 'Preparing environment...'
                                sh 'mkdir /zap/wrk/'
                                sh 'cp -r * /zap/wrk/'
                                
                                echo 'Runnig DAST...'
                                sh 'zap-baseline.py -t http://test -x zap_dast.xml || echo 0'
                                sh 'cp /zap/wrk/zap_dast.xml .'
                                
                                echo 'Here is the report...'
                                sh 'cat /zap/wrk/zap_dast.xml'
                                
                                archiveArtifacts artifacts: 'zap_dast.xml', allowEmptyArchive: true, fingerprint: true
                            }
                        }
                        stage('Stop application') {
                            steps {
                                sh 'docker stop test && docker rm test'
                            }
                        }
                        stage('Test') {
                            steps {
                                sh 'ls -la'
                            }
                        }
                    }
                    post {
                        always {
                            sh 'docker stop test || true'
                            sh 'docker rm test || true'
                        }
                    }
                }
            ''')
          }
        }
      }
